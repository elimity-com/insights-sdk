// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: elimity/insights/export/v1alpha1/export.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/elimity-com/insights-sdk/gen/elimity/insights/export/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "elimity.insights.export.v1alpha1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceExportProcedure is the fully-qualified name of the Service's Export RPC.
	ServiceExportProcedure = "/elimity.insights.export.v1alpha1.Service/Export"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor      = v1alpha1.File_elimity_insights_export_v1alpha1_export_proto.Services().ByName("Service")
	serviceExportMethodDescriptor = serviceServiceDescriptor.Methods().ByName("Export")
)

// ServiceClient is a client for the elimity.insights.export.v1alpha1.Service service.
type ServiceClient interface {
	Export(context.Context, *connect.Request[v1alpha1.ExportRequest]) (*connect.ServerStreamForClient[v1alpha1.ExportResponse], error)
}

// NewServiceClient constructs a client for the elimity.insights.export.v1alpha1.Service service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		export: connect.NewClient[v1alpha1.ExportRequest, v1alpha1.ExportResponse](
			httpClient,
			baseURL+ServiceExportProcedure,
			connect.WithSchema(serviceExportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	export *connect.Client[v1alpha1.ExportRequest, v1alpha1.ExportResponse]
}

// Export calls elimity.insights.export.v1alpha1.Service.Export.
func (c *serviceClient) Export(ctx context.Context, req *connect.Request[v1alpha1.ExportRequest]) (*connect.ServerStreamForClient[v1alpha1.ExportResponse], error) {
	return c.export.CallServerStream(ctx, req)
}

// ServiceHandler is an implementation of the elimity.insights.export.v1alpha1.Service service.
type ServiceHandler interface {
	Export(context.Context, *connect.Request[v1alpha1.ExportRequest], *connect.ServerStream[v1alpha1.ExportResponse]) error
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceExportHandler := connect.NewServerStreamHandler(
		ServiceExportProcedure,
		svc.Export,
		connect.WithSchema(serviceExportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/elimity.insights.export.v1alpha1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceExportProcedure:
			serviceExportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Export(context.Context, *connect.Request[v1alpha1.ExportRequest], *connect.ServerStream[v1alpha1.ExportResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("elimity.insights.export.v1alpha1.Service.Export is not implemented"))
}
