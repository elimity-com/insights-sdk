// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file elimity/insights/export/v1alpha1/export.proto (package elimity.insights.export.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Entity, Relationship } from "../../common/v1alpha1/common_pb.js";

/**
 * @generated from message elimity.insights.export.v1alpha1.ExportRequest
 */
export class ExportRequest extends Message<ExportRequest> {
  /**
   * @generated from field: int64 api_token_id = 1;
   */
  apiTokenId = protoInt64.zero;

  /**
   * @generated from field: bytes api_token_secret = 2;
   */
  apiTokenSecret = new Uint8Array(0);

  /**
   * @generated from field: repeated elimity.insights.export.v1alpha1.Target targets = 3;
   */
  targets: Target[] = [];

  constructor(data?: PartialMessage<ExportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.ExportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_token_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "api_token_secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "targets", kind: "message", T: Target, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportRequest {
    return new ExportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportRequest {
    return new ExportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportRequest {
    return new ExportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportRequest | PlainMessage<ExportRequest> | undefined, b: ExportRequest | PlainMessage<ExportRequest> | undefined): boolean {
    return proto3.util.equals(ExportRequest, a, b);
  }
}

/**
 * @generated from message elimity.insights.export.v1alpha1.ExportResponse
 */
export class ExportResponse extends Message<ExportResponse> {
  /**
   * @generated from field: elimity.insights.export.v1alpha1.Item item = 1;
   */
  item?: Item;

  /**
   * @generated from field: int64 target_index = 2;
   */
  targetIndex = protoInt64.zero;

  constructor(data?: PartialMessage<ExportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.ExportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: Item },
    { no: 2, name: "target_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportResponse {
    return new ExportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportResponse {
    return new ExportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportResponse {
    return new ExportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportResponse | PlainMessage<ExportResponse> | undefined, b: ExportResponse | PlainMessage<ExportResponse> | undefined): boolean {
    return proto3.util.equals(ExportResponse, a, b);
  }
}

/**
 * @generated from message elimity.insights.export.v1alpha1.Filter
 */
export class Filter extends Message<Filter> {
  /**
   * @generated from oneof elimity.insights.export.v1alpha1.Filter.value
   */
  value: {
    /**
     * @generated from field: string entity_type = 1;
     */
    value: string;
    case: "entityType";
  } | {
    /**
     * @generated from field: elimity.insights.export.v1alpha1.RelationshipType relationship_type = 2;
     */
    value: RelationshipType;
    case: "relationshipType";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_type", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "relationship_type", kind: "message", T: RelationshipType, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter {
    return new Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJsonString(jsonString, options);
  }

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean {
    return proto3.util.equals(Filter, a, b);
  }
}

/**
 * @generated from message elimity.insights.export.v1alpha1.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from oneof elimity.insights.export.v1alpha1.Item.value
   */
  value: {
    /**
     * @generated from field: elimity.insights.common.v1alpha1.Entity entity = 1;
     */
    value: Entity;
    case: "entity";
  } | {
    /**
     * @generated from field: elimity.insights.common.v1alpha1.Relationship relationship = 2;
     */
    value: Relationship;
    case: "relationship";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: Entity, oneof: "value" },
    { no: 2, name: "relationship", kind: "message", T: Relationship, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message elimity.insights.export.v1alpha1.RelationshipType
 */
export class RelationshipType extends Message<RelationshipType> {
  /**
   * @generated from field: string from_entity_type = 1;
   */
  fromEntityType = "";

  /**
   * @generated from field: string to_entity_type = 2;
   */
  toEntityType = "";

  constructor(data?: PartialMessage<RelationshipType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.RelationshipType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_entity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_entity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationshipType {
    return new RelationshipType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationshipType {
    return new RelationshipType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationshipType {
    return new RelationshipType().fromJsonString(jsonString, options);
  }

  static equals(a: RelationshipType | PlainMessage<RelationshipType> | undefined, b: RelationshipType | PlainMessage<RelationshipType> | undefined): boolean {
    return proto3.util.equals(RelationshipType, a, b);
  }
}

/**
 * @generated from message elimity.insights.export.v1alpha1.Target
 */
export class Target extends Message<Target> {
  /**
   * @generated from field: elimity.insights.export.v1alpha1.Filter filter = 1;
   */
  filter?: Filter;

  /**
   * @generated from field: int64 source_id = 2;
   */
  sourceId = protoInt64.zero;

  constructor(data?: PartialMessage<Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.export.v1alpha1.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: Filter },
    { no: 2, name: "source_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Target {
    return new Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJsonString(jsonString, options);
  }

  static equals(a: Target | PlainMessage<Target> | undefined, b: Target | PlainMessage<Target> | undefined): boolean {
    return proto3.util.equals(Target, a, b);
  }
}

