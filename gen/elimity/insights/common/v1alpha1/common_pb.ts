// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file elimity/insights/common/v1alpha1/common.proto (package elimity.insights.common.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message elimity.insights.common.v1alpha1.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * @generated from field: map<string, elimity.insights.common.v1alpha1.Value> attribute_assignments = 1;
   */
  attributeAssignments: { [key: string]: Value } = {};

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.common.v1alpha1.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_assignments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 * @generated from message elimity.insights.common.v1alpha1.Relationship
 */
export class Relationship extends Message<Relationship> {
  /**
   * @generated from field: map<string, elimity.insights.common.v1alpha1.Value> attribute_assignments = 1;
   */
  attributeAssignments: { [key: string]: Value } = {};

  /**
   * @generated from field: string from_entity_id = 2;
   */
  fromEntityId = "";

  /**
   * @generated from field: string from_entity_type = 3;
   */
  fromEntityType = "";

  /**
   * @generated from field: string to_entity_id = 4;
   */
  toEntityId = "";

  /**
   * @generated from field: string to_entity_type = 5;
   */
  toEntityType = "";

  constructor(data?: PartialMessage<Relationship>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.common.v1alpha1.Relationship";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_assignments", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "from_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "from_entity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "to_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "to_entity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relationship {
    return new Relationship().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relationship {
    return new Relationship().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relationship {
    return new Relationship().fromJsonString(jsonString, options);
  }

  static equals(a: Relationship | PlainMessage<Relationship> | undefined, b: Relationship | PlainMessage<Relationship> | undefined): boolean {
    return proto3.util.equals(Relationship, a, b);
  }
}

/**
 * @generated from message elimity.insights.common.v1alpha1.Value
 */
export class Value extends Message<Value> {
  /**
   * @generated from oneof elimity.insights.common.v1alpha1.Value.value
   */
  value: {
    /**
     * @generated from field: bool boolean = 1;
     */
    value: boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp date = 2;
     */
    value: Timestamp;
    case: "date";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp date_time = 3;
     */
    value: Timestamp;
    case: "dateTime";
  } | {
    /**
     * @generated from field: double number = 4;
     */
    value: number;
    case: "number";
  } | {
    /**
     * @generated from field: string string = 5;
     */
    value: string;
    case: "string";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp time = 6;
     */
    value: Timestamp;
    case: "time";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.common.v1alpha1.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 2, name: "date", kind: "message", T: Timestamp, oneof: "value" },
    { no: 3, name: "date_time", kind: "message", T: Timestamp, oneof: "value" },
    { no: 4, name: "number", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 5, name: "string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 6, name: "time", kind: "message", T: Timestamp, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Value {
    return new Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJsonString(jsonString, options);
  }

  static equals(a: Value | PlainMessage<Value> | undefined, b: Value | PlainMessage<Value> | undefined): boolean {
    return proto3.util.equals(Value, a, b);
  }
}

