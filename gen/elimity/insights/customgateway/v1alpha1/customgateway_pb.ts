// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file elimity/insights/customgateway/v1alpha1/customgateway.proto (package elimity.insights.customgateway.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3, Value } from "@bufbuild/protobuf";
import { Entity, Relationship } from "../../common/v1alpha1/common_pb.js";

/**
 * @generated from message elimity.insights.customgateway.v1alpha1.Level
 */
export class Level extends Message<Level> {
  /**
   * @generated from oneof elimity.insights.customgateway.v1alpha1.Level.value
   */
  value: {
    /**
     * @generated from field: google.protobuf.Empty alert = 1;
     */
    value: Empty;
    case: "alert";
  } | {
    /**
     * @generated from field: google.protobuf.Empty info = 2;
     */
    value: Empty;
    case: "info";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Level>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.customgateway.v1alpha1.Level";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert", kind: "message", T: Empty, oneof: "value" },
    { no: 2, name: "info", kind: "message", T: Empty, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Level {
    return new Level().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJsonString(jsonString, options);
  }

  static equals(a: Level | PlainMessage<Level> | undefined, b: Level | PlainMessage<Level> | undefined): boolean {
    return proto3.util.equals(Level, a, b);
  }
}

/**
 * @generated from message elimity.insights.customgateway.v1alpha1.Log
 */
export class Log extends Message<Log> {
  /**
   * @generated from field: elimity.insights.customgateway.v1alpha1.Level level = 1;
   */
  level?: Level;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.customgateway.v1alpha1.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "message", T: Level },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Log {
    return new Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJsonString(jsonString, options);
  }

  static equals(a: Log | PlainMessage<Log> | undefined, b: Log | PlainMessage<Log> | undefined): boolean {
    return proto3.util.equals(Log, a, b);
  }
}

/**
 * @generated from message elimity.insights.customgateway.v1alpha1.PerformImportRequest
 */
export class PerformImportRequest extends Message<PerformImportRequest> {
  /**
   * @generated from field: map<string, google.protobuf.Value> fields = 1;
   */
  fields: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<PerformImportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.customgateway.v1alpha1.PerformImportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformImportRequest {
    return new PerformImportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformImportRequest {
    return new PerformImportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformImportRequest {
    return new PerformImportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PerformImportRequest | PlainMessage<PerformImportRequest> | undefined, b: PerformImportRequest | PlainMessage<PerformImportRequest> | undefined): boolean {
    return proto3.util.equals(PerformImportRequest, a, b);
  }
}

/**
 * @generated from message elimity.insights.customgateway.v1alpha1.PerformImportResponse
 */
export class PerformImportResponse extends Message<PerformImportResponse> {
  /**
   * @generated from oneof elimity.insights.customgateway.v1alpha1.PerformImportResponse.value
   */
  value: {
    /**
     * @generated from field: elimity.insights.common.v1alpha1.Entity entity = 1;
     */
    value: Entity;
    case: "entity";
  } | {
    /**
     * @generated from field: elimity.insights.customgateway.v1alpha1.Log log = 2;
     */
    value: Log;
    case: "log";
  } | {
    /**
     * @generated from field: elimity.insights.common.v1alpha1.Relationship relationship = 3;
     */
    value: Relationship;
    case: "relationship";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PerformImportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elimity.insights.customgateway.v1alpha1.PerformImportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: Entity, oneof: "value" },
    { no: 2, name: "log", kind: "message", T: Log, oneof: "value" },
    { no: 3, name: "relationship", kind: "message", T: Relationship, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformImportResponse {
    return new PerformImportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformImportResponse {
    return new PerformImportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformImportResponse {
    return new PerformImportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PerformImportResponse | PlainMessage<PerformImportResponse> | undefined, b: PerformImportResponse | PlainMessage<PerformImportResponse> | undefined): boolean {
    return proto3.util.equals(PerformImportResponse, a, b);
  }
}

